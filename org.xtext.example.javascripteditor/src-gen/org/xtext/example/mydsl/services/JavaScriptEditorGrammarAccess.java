/*
* generated by Xtext
*/
package org.xtext.example.mydsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class JavaScriptEditorGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class DomainmodelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Domainmodel");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsAbstractElementParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//Domainmodel:
		//	elements+=AbstractElement*;
		public ParserRule getRule() { return rule; }

		//elements+=AbstractElement*
		public Assignment getElementsAssignment() { return cElementsAssignment; }

		//AbstractElement
		public RuleCall getElementsAbstractElementParserRuleCall_0() { return cElementsAbstractElementParserRuleCall_0; }
	}

	public class AbstractElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFunctionDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cProgramStartParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//AbstractElement:
		//	FunctionDeclaration | Type | ProgramStart;
		public ParserRule getRule() { return rule; }

		//FunctionDeclaration | Type | ProgramStart
		public Alternatives getAlternatives() { return cAlternatives; }

		//FunctionDeclaration
		public RuleCall getFunctionDeclarationParserRuleCall_0() { return cFunctionDeclarationParserRuleCall_0; }

		//Type
		public RuleCall getTypeParserRuleCall_1() { return cTypeParserRuleCall_1; }

		//ProgramStart
		public RuleCall getProgramStartParserRuleCall_2() { return cProgramStartParserRuleCall_2; }
	}

	public class ProgramStartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProgramStart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScriptKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsAbstractElementParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		private final Keyword cScriptKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ProgramStart:
		//	"<script>" elements+=AbstractElement+ "</script>";
		public ParserRule getRule() { return rule; }

		//"<script>" elements+=AbstractElement+ "</script>"
		public Group getGroup() { return cGroup; }

		//"<script>"
		public Keyword getScriptKeyword_0() { return cScriptKeyword_0; }

		//elements+=AbstractElement+
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }

		//AbstractElement
		public RuleCall getElementsAbstractElementParserRuleCall_1_0() { return cElementsAbstractElementParserRuleCall_1_0; }

		//"</script>"
		public Keyword getScriptKeyword_2() { return cScriptKeyword_2; }
	}

	public class FunctionDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cArgumentsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArgumentsIDTerminalRuleCall_3_0 = (RuleCall)cArgumentsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cArgumentAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cArgumentIDTerminalRuleCall_4_1_0 = (RuleCall)cArgumentAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cElementsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cElementsAbstractElementParserRuleCall_6_0 = (RuleCall)cElementsAssignment_6.eContents().get(0);
		private final Assignment cInstructiuonsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cInstructiuonsInstructionsParserRuleCall_7_0 = (RuleCall)cInstructiuonsAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//FunctionDeclaration:
		//	"function" name=QualifiedName "(" arguments=ID? ("," argument+=ID)* "){" elements+=AbstractElement*
		//	instructiuons+=Instructions* "}";
		public ParserRule getRule() { return rule; }

		//"function" name=QualifiedName "(" arguments=ID? ("," argument+=ID)* "){" elements+=AbstractElement*
		//instructiuons+=Instructions* "}"
		public Group getGroup() { return cGroup; }

		//"function"
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//arguments=ID?
		public Assignment getArgumentsAssignment_3() { return cArgumentsAssignment_3; }

		//ID
		public RuleCall getArgumentsIDTerminalRuleCall_3_0() { return cArgumentsIDTerminalRuleCall_3_0; }

		//("," argument+=ID)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//argument+=ID
		public Assignment getArgumentAssignment_4_1() { return cArgumentAssignment_4_1; }

		//ID
		public RuleCall getArgumentIDTerminalRuleCall_4_1_0() { return cArgumentIDTerminalRuleCall_4_1_0; }

		//"){"
		public Keyword getRightParenthesisLeftCurlyBracketKeyword_5() { return cRightParenthesisLeftCurlyBracketKeyword_5; }

		//elements+=AbstractElement*
		public Assignment getElementsAssignment_6() { return cElementsAssignment_6; }

		//AbstractElement
		public RuleCall getElementsAbstractElementParserRuleCall_6_0() { return cElementsAbstractElementParserRuleCall_6_0; }

		//instructiuons+=Instructions*
		public Assignment getInstructiuonsAssignment_7() { return cInstructiuonsAssignment_7; }

		//Instructions
		public RuleCall getInstructiuonsInstructionsParserRuleCall_7_0() { return cInstructiuonsInstructionsParserRuleCall_7_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//QualifiedName:
		//	ID;
		public ParserRule getRule() { return rule; }

		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cElementAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cElementIDTerminalRuleCall_2_1_0 = (RuleCall)cElementAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Type:
		//	"var" name=ID ("=" element=ID)? ";";
		public ParserRule getRule() { return rule; }

		//"var" name=ID ("=" element=ID)? ";"
		public Group getGroup() { return cGroup; }

		//"var"
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("=" element=ID)?
		public Group getGroup_2() { return cGroup_2; }

		//"="
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }

		//element=ID
		public Assignment getElementAssignment_2_1() { return cElementAssignment_2_1; }

		//ID
		public RuleCall getElementIDTerminalRuleCall_2_1_0() { return cElementIDTerminalRuleCall_2_1_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class InstructionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Instructions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Instructions:
		//	ID ";";
		public ParserRule getRule() { return rule; }

		//ID ";"
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	
	
	private DomainmodelElements pDomainmodel;
	private AbstractElementElements pAbstractElement;
	private ProgramStartElements pProgramStart;
	private FunctionDeclarationElements pFunctionDeclaration;
	private QualifiedNameElements pQualifiedName;
	private TypeElements pType;
	private InstructionsElements pInstructions;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public JavaScriptEditorGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.JavaScriptEditor".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Domainmodel:
	//	elements+=AbstractElement*;
	public DomainmodelElements getDomainmodelAccess() {
		return (pDomainmodel != null) ? pDomainmodel : (pDomainmodel = new DomainmodelElements());
	}
	
	public ParserRule getDomainmodelRule() {
		return getDomainmodelAccess().getRule();
	}

	//AbstractElement:
	//	FunctionDeclaration | Type | ProgramStart;
	public AbstractElementElements getAbstractElementAccess() {
		return (pAbstractElement != null) ? pAbstractElement : (pAbstractElement = new AbstractElementElements());
	}
	
	public ParserRule getAbstractElementRule() {
		return getAbstractElementAccess().getRule();
	}

	//ProgramStart:
	//	"<script>" elements+=AbstractElement+ "</script>";
	public ProgramStartElements getProgramStartAccess() {
		return (pProgramStart != null) ? pProgramStart : (pProgramStart = new ProgramStartElements());
	}
	
	public ParserRule getProgramStartRule() {
		return getProgramStartAccess().getRule();
	}

	//FunctionDeclaration:
	//	"function" name=QualifiedName "(" arguments=ID? ("," argument+=ID)* "){" elements+=AbstractElement*
	//	instructiuons+=Instructions* "}";
	public FunctionDeclarationElements getFunctionDeclarationAccess() {
		return (pFunctionDeclaration != null) ? pFunctionDeclaration : (pFunctionDeclaration = new FunctionDeclarationElements());
	}
	
	public ParserRule getFunctionDeclarationRule() {
		return getFunctionDeclarationAccess().getRule();
	}

	//QualifiedName:
	//	ID;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Type:
	//	"var" name=ID ("=" element=ID)? ";";
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//Instructions:
	//	ID ";";
	public InstructionsElements getInstructionsAccess() {
		return (pInstructions != null) ? pInstructions : (pInstructions = new InstructionsElements());
	}
	
	public ParserRule getInstructionsRule() {
		return getInstructionsAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
